using BusinessEntity.BEModels;
using BusinessEntity.Context;
using CARepository.Abstract;
using CARepository.RepoModels;
using CAUtility;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CARepository.Implementation
{
    public class UserDetailsRepo : IUserDetailsRepo
    {
        CompetencyContext _context = new CompetencyContext();
        EmailUtility utility = new EmailUtility();

        public UserInfo SubmitUserLogin(LoginViewModel loginViewModel)
        {
            UserInfo userObj = new UserInfo();
            string responseMsg = String.Empty;
            try
            {
                userObj = _context.UserInfoData.FirstOrDefault(x => x.UserId == loginViewModel.UserId && x.Password == loginViewModel.Password);

                
            }
            catch (Exception ex)
            {
                responseMsg = ex.Message;
            }
            

            return userObj;
        }

        public string RegisterNewUser(RegisterViewModel registerView)
        {
            string responseMsg = string.Empty;
            UserInfo oldUser = _context.UserInfoData.FirstOrDefault(x => x.UserId == registerView.UserId);

            if (oldUser != null)
            {
                responseMsg = "User Already Exist";
            }
            else
            {
                try
                {
                    Random obj = new Random();
                    int otp = obj.Next(10000, 99999);

                    UserInfo newUser = new UserInfo();
                    newUser.UserId = registerView.UserId;
                    newUser.Password = otp.ToString();
                    newUser.Name = registerView.Name;
                    newUser.EmpID = registerView.EmpID;
                    newUser.Email = registerView.Email;
                    newUser.RoleID = registerView.RoleID;
                    newUser.isActive = registerView.isActive;
                    newUser.CreatedBy = registerView.CreatedBy;

                    _context.UserInfoData.Add(newUser);
                    _context.SaveChanges();

                    if (newUser.UserId != null)
                    {
                        responseMsg = "success";
                        string msgBody = "Dear user,<br>You have been nominated for competency assessment. Please access the portal using user ID " + registerView.UserId + " and Password " + otp + "<br><br>Regards,<br>(Its an autogenerated mail please don't reply)";

                        utility.SendEmail(
                            "gattu.sreeni@gmail.com",
                            "nivas296@gmail.com",
                            "Assessment Registration Confirmation",
                            msgBody
                        );

                    }
                    else
                    {
                        responseMsg = "Create User Failed";
                    }
                }
                catch (Exception ex)
                {
                    responseMsg = ex.Message;
                }
            }

            return responseMsg;
        }

        public List<RoleDetail> GetRoleDetails()
        {
            List<RoleDetail> rolesList = new List<RoleDetail>();

            try
            {
                rolesList = _context.RoleDetailData.ToList();
            }
            catch (Exception ex)
            {
                string str = ex.Message;
            }

            return rolesList;
        }

        public UserInfo ChangePassword(ChangePasswordModel changePswdModel)
        {
            UserInfo userObj = _context.UserInfoData.FirstOrDefault(x => x.UserId == changePswdModel.UserId && x.Password == changePswdModel.Password);

            if (userObj != null && changePswdModel.NewPassword == changePswdModel.ConfirmNewPassword)
            {
                try
                {
                    userObj.Password = changePswdModel.NewPassword;
                    userObj.ModifiedBy = changePswdModel.ModifiedBy;
                    userObj.ModifiedDate = DateTime.Now;
                    userObj.PasswordChangeDate = DateTime.Now;
                    _context.SaveChanges();
                }
                catch (Exception ex)
                {
                    string str = ex.Message;
                }
            }

            return userObj;
        }
    }
}
